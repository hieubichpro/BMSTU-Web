openapi: 3.0.3
info:
  title: Football Tournament Management
  version: 1.0.0
  description: API for app

# servers:
#   - url: https://api.example.com/v1
#     description: Main API server

tags:
  - name: user
    description: Operation with user.
  - name: league
    description: Operation with league.
  - name: club
    description: Operation with club.
  - name: match
    description: Operation with match.
paths:
  /users:
    post:
      tags:
        - user
      summary: Create a new user.
      description: Create a new user.
      requestBody:
        description: Create a new user.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
        required: true
      responses:
        "200":
          description: OK.
        "400":
          description: Invalid input!
        "500":
          description: Connect to database failed!
  /users/{userid}:
    get:
      tags:
        - user
      summary: get user by id.
      description: get user by id.
      parameters:
        - name: id.
          in: path
          description: ID of user.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "400":
          description: id must be an integer.
        "404":
          description: user not found.

    put:
      tags:
        - user
      summary: update user.
      description: update user .
      parameters:
        - name: user.
          in: path
          description: instance of object User.
          required: true
          schema:
            $ref: "#/components/schemas/user"
      responses:
        "200":
          description: successfully
        "400":
          description: failed connect to DB.
    delete:
      tags:
        - user
      summary: delete user by id.
      description: delete user by id.
      parameters:
        - name: id.
          in: path
          description: ID of user.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successfully.
        "404":
          description: doesn't exists.

    patch:
      tags:
        - user
      parameters:
        - name: login.
          in: path
          required: true
          schema:
            type: string
        - name: password.
          in: path
          required: true
          schema:
            type: string
      summary: change information of user
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                login:
                  type: string
                password:
                  type: string
                name:
                  type: string
                role:
                  type: string

      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "400":
          description: invalid login

  /users/{userlogin}:
    get:
      tags:
        - user
      summary: get user by login.
      description: get user by login.
      parameters:
        - name: login.
          in: path
          description: login of user.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "404":
          description: user not found.
  /users?userRole=string:
    get:
      tags:
        - user
      summary: get user by role.
      description: get user by role.
      parameters:
        - name: role.
          in: query
          description: role of user.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"

  /leagues:
    post:
      tags:
        - league
      summary: Create a new league.
      description: Create a new league.
      requestBody:
        description: Create a new league.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/league"
        required: true
      responses:
        "200":
          description: OK.
        "400":
          description: Invalid input!
        "500":
          description: Connect to database failed!

    get:
      tags:
        - league
      summary: get all league.
      description: get all league.
      responses:
        "200":
          description: successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/league"

  /leagues/{leagueid}:
    delete:
      tags:
        - league
      summary: delete league by id.
      description: delete league by id.
      parameters:
        - name: id.
          in: path
          description: ID of league.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successfully.
        "404":
          description: doesn't exists.

    put:
      tags:
        - league
      summary: update league.
      description: update league .
      parameters:
        - name: league.
          in: path
          description: instance of object League.
          required: true
          schema:
            $ref: "#/components/schemas/league"
      responses:
        "200":
          description: successfully
        "400":
          description: failed connect to DB.

    get:
      tags:
        - league
      summary: get league by id.
      description: get league by id.
      parameters:
        - name: id.
          in: path
          description: ID of league.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/league"
        "400":
          description: id must be an integer.
        "404":
          description: user not found.

  /leagues/{userid}:
    get:
      tags:
        - league
      summary: get league by ID user.
      description: get league by ID user.
      parameters:
        - name: id User.
          in: path
          description: id of user.
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/league"
        "404":
          description: not found.

  /clubs:
    post:
      tags:
        - club
      summary: Create a new club.
      description: Create a new club.
      requestBody:
        description: Create a new club.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/club"
        required: true
      responses:
        "200":
          description: OK.
        "400":
          description: Invalid input!
        "500":
          description: Connect to database failed!

    get:
      tags:
        - club
      summary: get all club.
      description: get all club.
      responses:
        "200":
          description: successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/club"

  /clubs/{idclub}:
    delete:
      tags:
        - club
      summary: delete club by id.
      description: delete club by id.
      parameters:
        - name: id.
          in: path
          description: ID of club.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successfully.
        "404":
          description: doesn't exists.

    put:
      tags:
        - club
      summary: update club.
      description: update club .
      parameters:
        - name: league.
          in: path
          description: instance of object Club.
          required: true
          schema:
            $ref: "#/components/schemas/club"
      responses:
        "200":
          description: successfully
        "400":
          description: failed connect to DB.

    get:
      tags:
        - club
      summary: get club by id.
      description: get club by id.
      parameters:
        - name: id.
          in: path
          description: ID of club.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/club"
        "400":
          description: id must be an integer.
        "404":
          description: user not found.

  /matches:
    post:
      tags:
        - match
      summary: Create a new match.
      description: Create a new match.
      requestBody:
        description: Create a new match.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/match"
        required: true
      responses:
        "200":
          description: OK.
        "400":
          description: Invalid input!
        "500":
          description: Connect to database failed!

    get:
      tags:
        - match
      summary: get all match.
      description: get all match.
      responses:
        "200":
          description: successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/match"

  /matches/{matchid}:
    delete:
      tags:
        - match
      summary: delete match by id.
      description: delete match by id.
      parameters:
        - name: id.
          in: path
          description: ID of match.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successfully.
        "404":
          description: doesn't exists.

    put:
      tags:
        - match
      summary: update match.
      description: update match .
      parameters:
        - name: match.
          in: path
          description: instance of object Match.
          required: true
          schema:
            $ref: "#/components/schemas/match"
      responses:
        "200":
          description: successfully
        "400":
          description: failed connect to DB.

    get:
      tags:
        - match
      summary: get match by id.
      description: get club by id.
      parameters:
        - name: id.
          in: path
          description: ID of club.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/club"
        "400":
          description: id must be an integer.
        "404":
          description: user not found.

  /matches?idleague=int:
    get:
      tags:
        - match
      summary: get match by ID league.
      description: get match by ID league.
      parameters:
        - name: id league.
          in: query
          description: id of league.
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/match"
        "404":
          description: not found.

components:
  schemas:
    user:
      type: object
      properties:
        id:
          type: integer
          example: 1
        login:
          type: string
          example: admin
        password:
          type: string
          example: aaa
        role:
          type: string
          example: Referee
        name:
          type: string
          example: Andrey
    league:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: EPL
        idUser:
          type: integer
          example: 2
    club:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Chelsea
    match:
      type: object
      properties:
        id:
          type: integer
          example: 1
        goalHomeTeam:
          type: integer
          example: 1
        goalGuestTeam:
          type: integer
          example: 1
        idLeague:
          type: integer
          example: 1
        idHomeTeam:
          type: integer
          example: 1
        idGuestTeam:
          type: integer
          example: 1
